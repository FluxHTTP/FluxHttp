name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  CI: true

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-run-full-suite: ${{ steps.changes.outputs.src == 'true' || steps.changes.outputs.tests == 'true' || steps.changes.outputs.package == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
            tests:
              - 'tests/**'
            package:
              - 'package*.json'
              - 'tsconfig*.json'
              - 'tsup.config.ts'
            docs:
              - 'docs/**'
              - '*.md'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript compilation check
        run: npm run typecheck

      - name: ESLint check
        run: npm run lint

      - name: Prettier format check
        run: npx prettier --check "src/**/*.ts" "tests/**/*.{ts,js}"

  test-matrix:
    name: Test Matrix (Node ${{ matrix.node-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality-gates
    if: needs.quality-gates.outputs.should-run-full-suite == 'true'
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ['16', '18', '20', '21']
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - node-version: '20'
            os: ubuntu-latest
            coverage: true
        exclude:
          # Reduce matrix size for faster builds
          - node-version: '16'
            os: macos-latest
          - node-version: '21'
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run all tests with coverage (Node 20 only)
        if: matrix.coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Bundle size check
        if: matrix.coverage
        run: npm run size

  browser-compatibility:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-run-full-suite == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Test examples
        run: npm run examples:all

      - name: Check browser compatibility build
        run: |
          node -e "
            const pkg = require('./package.json');
            console.log('Browser field mappings:', JSON.stringify(pkg.browser, null, 2));
            const fs = require('fs');
            const distFiles = fs.readdirSync('./dist');
            console.log('Generated dist files:', distFiles);
            
            // Verify ES modules work
            if (fs.existsSync('./dist/index.mjs')) {
              console.log('✓ ES modules build present');
            } else {
              throw new Error('ES modules build missing');
            }
            
            // Verify CommonJS works
            if (fs.existsSync('./dist/index.js')) {
              console.log('✓ CommonJS build present');
            } else {
              throw new Error('CommonJS build missing');
            }
          "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: npm run security:check

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-run-full-suite == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Run performance benchmarks
        run: |
          if [ -f "benchmarks/performance.js" ]; then
            node benchmarks/performance.js
          else
            echo "Performance benchmarks not available, skipping..."
          fi

      - name: Bundle size analysis
        run: |
          npm run size
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm run size 2>&1 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  final-checks:
    name: Final Integration Checks
    runs-on: ubuntu-latest
    needs: [quality-gates, test-matrix, browser-compatibility, security-scan, performance-check]
    if: always() && needs.quality-gates.outputs.should-run-full-suite == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build and test package creation
        run: |
          npm run build
          npm pack --dry-run
          
      - name: Verify package contents
        run: |
          echo "## Package Contents Verification" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm pack --dry-run 2>&1 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check all jobs status
        run: |
          # This job will fail if any of the needed jobs failed
          if [ "${{ needs.test-matrix.result }}" != "success" ]; then
            echo "Test matrix failed"
            exit 1
          fi
          if [ "${{ needs.browser-compatibility.result }}" != "success" ]; then
            echo "Browser compatibility check failed"
            exit 1
          fi
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "Security scan failed"
            exit 1
          fi
          if [ "${{ needs.performance-check.result }}" != "success" ]; then
            echo "Performance check failed"
            exit 1
          fi
          echo "All checks passed! ✅"

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [final-checks]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.final-checks.result == 'success'
        run: |
          echo "## ✅ CI Pipeline Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "All quality gates, tests, and checks have passed." >> $GITHUB_STEP_SUMMARY

      - name: Notify failure
        if: needs.final-checks.result != 'success'
        run: |
          echo "## ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "One or more checks have failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1