server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Root directory for test results
    root /usr/share/nginx/html;
    index index.html;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Main location - serve test results
    location / {
        try_files $uri $uri/ @directory_listing;
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
        autoindex_format html;
    }
    
    # Serve Playwright HTML reports
    location /e2e-report/ {
        alias /usr/share/nginx/html/e2e-report/;
        try_files $uri $uri/ =404;
        
        # Cache static assets
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1h;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Serve JSON results with proper content type
    location ~* \.json$ {
        add_header Content-Type application/json;
        add_header Access-Control-Allow-Origin *;
        expires 1d;
    }
    
    # Serve XML results with proper content type
    location ~* \.xml$ {
        add_header Content-Type application/xml;
        expires 1d;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API endpoint to list available reports
    location /api/reports {
        default_type application/json;
        content_by_lua_block {
            local cjson = require "cjson"
            local reports = {}
            
            -- Scan for available reports
            local handle = io.popen("find /usr/share/nginx/html -name '*.html' -type f")
            for file in handle:lines() do
                local name = file:match("([^/]+)%.html$")
                if name then
                    table.insert(reports, {
                        name = name,
                        path = file:gsub("/usr/share/nginx/html", ""),
                        type = "html"
                    })
                end
            end
            handle:close()
            
            -- Scan for JSON results
            handle = io.popen("find /usr/share/nginx/html -name '*.json' -type f")
            for file in handle:lines() do
                local name = file:match("([^/]+)%.json$")
                if name then
                    table.insert(reports, {
                        name = name,
                        path = file:gsub("/usr/share/nginx/html", ""),
                        type = "json"
                    })
                end
            end
            handle:close()
            
            ngx.say(cjson.encode({
                reports = reports,
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            }))
        }
    }
    
    # Directory listing fallback
    location @directory_listing {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Logging
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
}